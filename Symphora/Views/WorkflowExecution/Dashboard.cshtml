@model IEnumerable<Symphora.Models.ExecutionLog>
@{
    ViewData["Title"] = "Workflow Execution Dashboard";
    var workflowId = ViewData["WorkflowId"]?.ToString() ?? "";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="display-6">Workflow Execution Dashboard</h1>
                <div>
                    <button id="executeBtn" class="btn btn-success me-2" onclick="executeWorkflow()">
                        <i class="fas fa-play"></i> Run Workflow
                    </button>
                    <button id="cancelBtn" class="btn btn-danger me-2" onclick="cancelWorkflow()" disabled>
                        <i class="fas fa-stop"></i> Cancel
                    </button>
                    <a asp-controller="Workflows" asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Workflows
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Status and Progress Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-info-circle"></i> Execution Status
                    </h5>
                </div>
                <div class="card-body">
                    <div id="statusMessage" class="alert alert-info mb-3">
                        <i class="fas fa-clock"></i> Ready to execute workflow
                    </div>
                    
                    <div class="progress mb-3" style="height: 25px;">
                        <div id="progressBar" 
                             class="progress-bar progress-bar-striped" 
                             role="progressbar" 
                             style="width: 0%"
                             aria-valuenow="0" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                            0%
                        </div>
                    </div>
                    
                    <div class="row text-center">
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h6 class="card-title text-muted">Total Steps</h6>
                                    <h4 id="totalSteps" class="text-primary">0</h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h6 class="card-title text-muted">Completed</h6>
                                    <h4 id="completedSteps" class="text-success">0</h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h6 class="card-title text-muted">Failed</h6>
                                    <h4 id="failedSteps" class="text-danger">0</h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h6 class="card-title text-muted">Running</h6>
                                    <h4 id="runningSteps" class="text-warning">0</h4>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Execution Logs Section -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list-alt"></i> Execution Logs
                    </h5>
                    <button id="clearLogsBtn" class="btn btn-sm btn-outline-light" onclick="clearLogs()">
                        <i class="fas fa-trash"></i> Clear Logs
                    </button>
                </div>
                <div class="card-body p-0">
                    <div id="logsContainer" style="max-height: 500px; overflow-y: auto;">
                        <div id="logsTable">
                            @if (Model.Any())
                            {
                                <table class="table table-striped table-hover mb-0">
                                    <thead class="table-dark sticky-top">
                                        <tr>
                                            <th>Timestamp</th>
                                            <th>Agent</th>
                                            <th>Status</th>
                                            <th>Output</th>
                                        </tr>
                                    </thead>
                                    <tbody id="logsTableBody">
                                        @foreach (var log in Model)
                                        {
                                            <tr class="@GetRowClass(log.Status)">
                                                <td class="text-nowrap">
                                                    <small>@log.Timestamp.ToString("HH:mm:ss")</small>
                                                </td>
                                                <td>
                                                    <span class="fw-semibold">@(log.Agent?.Name ?? "System")</span>
                                                </td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(log.Status)">
                                                        @log.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="text-break">@log.Output</span>
                                                    @if (!string.IsNullOrEmpty(log.ErrorMessage))
                                                    {
                                                        <div class="text-danger small mt-1">
                                                            <i class="fas fa-exclamation-triangle"></i> @log.ErrorMessage
                                                        </div>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <div class="text-center text-muted p-4">
                                    <i class="fas fa-clipboard-list fa-3x mb-3"></i>
                                    <h5>No execution logs yet</h5>
                                    <p>Logs will appear here when you run the workflow</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetRowClass(string status)
    {
        return status.ToLower() switch
        {
            "running" => "table-warning",
            "completed" => "table-success",
            "failed" => "table-danger",
            "cancelled" => "table-secondary",
            _ => ""
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "running" => "bg-warning text-dark",
            "completed" => "bg-success",
            "failed" => "bg-danger",
            "cancelled" => "bg-secondary",
            _ => "bg-primary"
        };
    }
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        const workflowId = '@workflowId';
        let connection;
        let isExecuting = false;
        
        // Statistics tracking
        let stats = {
            total: 0,
            completed: 0,
            failed: 0,
            running: 0
        };

        // Initialize SignalR connection
        async function initializeConnection() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/workflowHub")
                .build();

            connection.on("StatusUpdate", function (message) {
                updateStatus(message, 'info');
            });

            connection.on("LogUpdate", function (log) {
                addLogEntry(log);
                updateStatistics(log);
                updateProgress();
            });

            try {
                await connection.start();
                await connection.invoke("JoinWorkflowGroup", workflowId);
                console.log("SignalR connected and joined workflow group");
            } catch (err) {
                console.error("SignalR connection failed:", err);
                updateStatus("Real-time updates unavailable", 'warning');
            }
        }

        // Execute workflow
        async function executeWorkflow() {
            if (isExecuting) return;

            try {
                isExecuting = true;
                updateExecutionButtons();
                clearLogs();
                resetStatistics();
                updateStatus("Starting workflow execution...", 'info');

                const response = await fetch(`/api/workflows/${workflowId}/execute`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({})
                });

                const result = await response.json();
                
                if (result.success) {
                    updateStatus(result.message, 'success');
                } else {
                    updateStatus(result.message, 'danger');
                    isExecuting = false;
                    updateExecutionButtons();
                }
            } catch (error) {
                console.error('Error executing workflow:', error);
                updateStatus("Failed to start workflow execution", 'danger');
                isExecuting = false;
                updateExecutionButtons();
            }
        }

        // Cancel workflow execution
        async function cancelWorkflow() {
            if (!isExecuting) return;

            try {
                const response = await fetch(`/api/workflows/${workflowId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();
                updateStatus(result.message, result.success ? 'warning' : 'danger');
                
                if (result.success) {
                    isExecuting = false;
                    updateExecutionButtons();
                }
            } catch (error) {
                console.error('Error cancelling workflow:', error);
                updateStatus("Failed to cancel workflow execution", 'danger');
            }
        }

        // Update status message
        function updateStatus(message, type) {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.className = `alert alert-${type}`;
            statusDiv.innerHTML = `<i class="fas fa-${getStatusIcon(type)}"></i> ${message}`;
        }

        // Get status icon based on type
        function getStatusIcon(type) {
            switch(type) {
                case 'success': return 'check-circle';
                case 'danger': return 'exclamation-triangle';
                case 'warning': return 'exclamation-circle';
                default: return 'info-circle';
            }
        }

        // Update execution buttons
        function updateExecutionButtons() {
            const executeBtn = document.getElementById('executeBtn');
            const cancelBtn = document.getElementById('cancelBtn');
            
            executeBtn.disabled = isExecuting;
            cancelBtn.disabled = !isExecuting;
        }

        // Add log entry to the table
        function addLogEntry(log) {
            const tbody = document.getElementById('logsTableBody');
            
            // Create table if it doesn't exist
            if (!tbody) {
                createLogsTable();
                return addLogEntry(log);
            }

            const row = document.createElement('tr');
            row.className = getRowClass(log.status);
            
            const timestamp = new Date(log.timestamp + 'Z').toLocaleTimeString();
            
            row.innerHTML = `
                <td class="text-nowrap"><small>${timestamp}</small></td>
                <td><span class="fw-semibold">${log.agentName || 'System'}</span></td>
                <td><span class="badge ${getStatusBadgeClass(log.status)}">${log.status}</span></td>
                <td>
                    <span class="text-break">${log.output}</span>
                    ${log.errorMessage ? `<div class="text-danger small mt-1"><i class="fas fa-exclamation-triangle"></i> ${log.errorMessage}</div>` : ''}
                </td>
            `;
            
            tbody.appendChild(row);
            
            // Scroll to bottom
            const container = document.getElementById('logsContainer');
            container.scrollTop = container.scrollHeight;
        }

        // Create logs table if it doesn't exist
        function createLogsTable() {
            const container = document.getElementById('logsTable');
            container.innerHTML = `
                <table class="table table-striped table-hover mb-0">
                    <thead class="table-dark sticky-top">
                        <tr>
                            <th>Timestamp</th>
                            <th>Agent</th>
                            <th>Status</th>
                            <th>Output</th>
                        </tr>
                    </thead>
                    <tbody id="logsTableBody"></tbody>
                </table>
            `;
        }

        // Update statistics
        function updateStatistics(log) {
            const status = log.status.toLowerCase();
            
            if (status === 'running') {
                stats.running++;
                stats.total++;
            } else if (status === 'completed') {
                stats.completed++;
                stats.running = Math.max(0, stats.running - 1);
            } else if (status === 'failed') {
                stats.failed++;
                stats.running = Math.max(0, stats.running - 1);
                isExecuting = false;
                updateExecutionButtons();
            } else if (status === 'cancelled') {
                isExecuting = false;
                updateExecutionButtons();
            }
            
            // Update display
            document.getElementById('totalSteps').textContent = stats.total;
            document.getElementById('completedSteps').textContent = stats.completed;
            document.getElementById('failedSteps').textContent = stats.failed;
            document.getElementById('runningSteps').textContent = stats.running;
        }

        // Update progress bar
        function updateProgress() {
            const progressBar = document.getElementById('progressBar');
            const progress = stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0;
            
            progressBar.style.width = `${progress}%`;
            progressBar.textContent = `${progress}%`;
            progressBar.setAttribute('aria-valuenow', progress);
            
            // Update progress bar color based on status
            if (stats.failed > 0) {
                progressBar.className = 'progress-bar bg-danger';
            } else if (stats.running > 0) {
                progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-warning';
            } else if (stats.completed === stats.total && stats.total > 0) {
                progressBar.className = 'progress-bar bg-success';
                isExecuting = false;
                updateExecutionButtons();
                updateStatus("Workflow execution completed successfully", 'success');
            }
        }

        // Reset statistics
        function resetStatistics() {
            stats = { total: 0, completed: 0, failed: 0, running: 0 };
            document.getElementById('totalSteps').textContent = '0';
            document.getElementById('completedSteps').textContent = '0';
            document.getElementById('failedSteps').textContent = '0';
            document.getElementById('runningSteps').textContent = '0';
            
            const progressBar = document.getElementById('progressBar');
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';
            progressBar.className = 'progress-bar progress-bar-striped';
        }

        // Clear logs
        function clearLogs() {
            const tbody = document.getElementById('logsTableBody');
            if (tbody) {
                tbody.innerHTML = '';
            } else {
                const container = document.getElementById('logsTable');
                container.innerHTML = `
                    <div class="text-center text-muted p-4">
                        <i class="fas fa-clipboard-list fa-3x mb-3"></i>
                        <h5>No execution logs yet</h5>
                        <p>Logs will appear here when you run the workflow</p>
                    </div>
                `;
            }
        }

        // Helper functions for styling
        function getRowClass(status) {
            switch(status.toLowerCase()) {
                case 'running': return 'table-warning';
                case 'completed': return 'table-success';
                case 'failed': return 'table-danger';
                case 'cancelled': return 'table-secondary';
                default: return '';
            }
        }

        function getStatusBadgeClass(status) {
            switch(status.toLowerCase()) {
                case 'running': return 'bg-warning text-dark';
                case 'completed': return 'bg-success';
                case 'failed': return 'bg-danger';
                case 'cancelled': return 'bg-secondary';
                default: return 'bg-primary';
            }
        }

        // Initialize connection when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeConnection();
        });
    </script>
}